pub struct Opcode {
    pub name: &'static str,
    pub num_bytes: u8
}

macro_rules! opcode {
    ($name:expr, $num_bytes:expr) => {
        Opcode {
            name: $name,
            num_bytes: $num_bytes
        }
    }
}


pub const OPCODES_86K: [Opcode; 256] = [
    opcode!("NOP", 1), //0x00
    opcode!("BR r8", 2),
    opcode!("LD d9", 2),
    opcode!("LD d9", 2),
    opcode!("LD @Ri", 1),
    opcode!("LD @Ri", 1),
    opcode!("LD @Ri", 1),
    opcode!("LD @Ri", 1),
    opcode!("CALL a12", 2), //0x08
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALLR, r16", 3), //0x10
    opcode!("BRF r16", 3),
    opcode!("ST d9", 2),
    opcode!("ST d9", 2),
    opcode!("ST @Ri", 1),
    opcode!("ST @Ri", 1),
    opcode!("ST @Ri", 1),
    opcode!("ST @Ri", 1),
    opcode!("CALL a12", 2), //0x18
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALL a12", 2),
    opcode!("CALLF a16", 3), //0x20
    opcode!("JMPF a16", 3),
    opcode!("MOV #i8,d9", 3),
    opcode!("MOV #i8,d9", 3),
    opcode!("MOV #i8, @Ri", 2),
    opcode!("MOV #i8, @Ri", 2),
    opcode!("MOV #i8, @Ri", 2),
    opcode!("MOV #i8, @Ri", 2),
    opcode!("JMP a12", 2), //0x28
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("MUL", 1), //0x30
    opcode!("BE #i8,r8", 3),
    opcode!("BE d9,r8", 3),
    opcode!("BE d9,r8", 3),
    opcode!("BE @Ri,#i8,r8", 3),
    opcode!("BE @Ri,#i8,r8", 3),
    opcode!("BE @Ri,#i8,r8", 3),
    opcode!("BE @Ri,#i8,r8", 3),
    opcode!("JMP a12", 2), //0x38
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("JMP a12", 2),
    opcode!("DIV", 1), //0x40
    opcode!("BNE #i8,r8", 3),
    opcode!("BNE d9,r8", 3),
    opcode!("BNE d9,r8", 3),
    opcode!("BNE @Ri,#i8,r8", 3),
    opcode!("BNE @Ri,#i8,r8", 3),
    opcode!("BNE @Ri,#i8,r8", 3),
    opcode!("BNE @Ri,#i8,r8", 3),
    opcode!("BPC d9,b3,r8", 3), //0x48
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("NOP?", 0), //0x50 - These two aren't in the opcode table - so hopefully nothing actually uses these
    opcode!("NOP?", 0),
    opcode!("DBNZ d9,r8", 3),
    opcode!("DBNZ d9,r8", 3),
    opcode!("DBNZ @Ri, r8", 2),
    opcode!("DBNZ @Ri, r8", 2),
    opcode!("DBNZ @Ri, r8", 2),
    opcode!("DBNZ @Ri, r8", 2),
    opcode!("BPC d9,b3,r8", 3), //0x58
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("BPC d9,b3,r8", 3),
    opcode!("PUSH d9", 2), //0x60
    opcode!("PUSH d9", 2),
    opcode!("INC d9", 2),
    opcode!("INC d9", 2),
    opcode!("INC @Ri", 1),
    opcode!("INC @Ri", 1),
    opcode!("INC @Ri", 1),
    opcode!("INC @Ri", 1),
    opcode!("BP d9,b3,r8", 3), //0x68
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("POP d9", 2), //0x70
    opcode!("POP d9", 2),
    opcode!("DEC d9", 2),
    opcode!("DEC d9", 2),
    opcode!("DEC @Ri", 1),
    opcode!("DEC @Ri", 1),
    opcode!("DEC @Ri", 1),
    opcode!("DEC @Ri", 1),
    opcode!("BP d9,b3,r8", 3), //0x78
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BP d9,b3,r8", 3),
    opcode!("BZ r8", 2), //0x80
    opcode!("ADD #i8", 2),
    opcode!("ADD d9", 2),
    opcode!("ADD d9", 2),
    opcode!("ADD @Ri", 1),
    opcode!("ADD @Ri", 1),
    opcode!("ADD @Ri", 1),
    opcode!("ADD @Ri", 1),
    opcode!("BN d9,b3,r8", 3), //0x88
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BNZ r8", 2), //0x90
    opcode!("ADDC #i8", 2),
    opcode!("ADDC d9", 2),
    opcode!("ADDC d9", 2),
    opcode!("ADDC @Ri", 1),
    opcode!("ADDC @Ri", 1),
    opcode!("ADDC @Ri", 1),
    opcode!("ADDC @Ri", 1),
    opcode!("BN d9,b3,r8", 3), //0x98
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("BN d9,b3,r8", 3),
    opcode!("RET", 1), //0xA0
    opcode!("SUB #i8", 2),
    opcode!("SUB d9", 2),
    opcode!("SUB d9", 2),
    opcode!("SUB @Ri", 1),
    opcode!("SUB @Ri", 1),
    opcode!("SUB @Ri", 1),
    opcode!("SUB @Ri", 1),
    opcode!("NOT1 d9,b3", 2), //0xA8
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("RETI", 1), //0xB0
    opcode!("SUBC #i8", 2),
    opcode!("SUBC d9", 2),
    opcode!("SUBC d9", 2),
    opcode!("SUBC @Ri", 1),
    opcode!("SUBC @Ri", 1),
    opcode!("SUBC @Ri", 1),
    opcode!("SUBC @Ri", 1),
    opcode!("NOT1 d9,b3", 2), //0xB8
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("NOT1 d9,b3", 2),
    opcode!("ROR", 1), //0xC0
    opcode!("LDC", 1),
    opcode!("XCH d9", 2),
    opcode!("XCH d9", 2),
    opcode!("XCH @Ri", 1),
    opcode!("XCH @Ri", 1),
    opcode!("XCH @Ri", 1),
    opcode!("XCH @Ri", 1),
    opcode!("CLR1 d9,b3", 2), //0xC8
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("RORC", 1), //0xD0
    opcode!("OR #i8", 2),
    opcode!("OR d9", 2),
    opcode!("OR d9", 2),
    opcode!("OR @Ri", 1),
    opcode!("OR @Ri", 1),
    opcode!("OR @Ri", 1),
    opcode!("OR @Ri", 1),
    opcode!("CLR1 d9,b3", 2), //0xD8
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("CLR1 d9,b3", 2),
    opcode!("ROL", 1), //0xE0
    opcode!("AND #i8", 2),
    opcode!("AND d9", 2),
    opcode!("AND d9", 2),
    opcode!("AND @Ri", 1),
    opcode!("AND @Ri", 1),
    opcode!("AND @Ri", 1),
    opcode!("AND @Ri", 1),
    opcode!("SET1 d9,b3", 2), //0xE8
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("ROLC", 1), //0xF0
    opcode!("XOR #i8", 2),
    opcode!("XOR d9", 2),
    opcode!("XOR d9", 2),
    opcode!("XOR @Ri", 1),
    opcode!("XOR @Ri", 1),
    opcode!("XOR @Ri", 1),
    opcode!("XOR @Ri", 1),
    opcode!("SET1 d9,b3", 2), //0xF8
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
    opcode!("SET1 d9,b3", 2),
];
